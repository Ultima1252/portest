#!/bin/sh
# Copyright (c) 2015, Ricky Gallamore
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.

PORTEST_VERSION="0.1.3"

usage() {
	cat << EOF
Usage: portest [-m git] [-f bulkfile] [-U default] [-d PORTSDIR] [-abcCdprRtTuv] \\
               file.diff cat/port ...

Parameters:
    -a     --  Do everything except revert and port test (-ptf build.ports.txt)
    -c     --  Create repo, see -m for supported protocols, default is git
    -f     --  Generate a poudiere usable bulk file
    -p     --  Patch, will exit on fail with output
               portsnap will create a backup directory
               which is used on soft reverts (-r) and updates (-u)
    -r     --  Revert repo, quick and effective
               portsnap uses backup created when patch (-p) is used, fast
               git (-r) is same as (-R) see below
               svn reverts all files from input patchfiles, fast
    -R     --  Reset repo, portsnap will rebuild tree, very slow
               git does hard reset and cleans all files, fast
               svn removed all files via status and revert -R, very slow!!
    -t     --  Test with portlint
    -T     --  Test with port test, or poudriere depending on
               USE_POUDRIERE
    -u     --  Update repo, git and svn will do a hard revert (-R) first
               portsnap do a soft revert if a backup directory exists
    -v     --  Show version of portest then exit
Options:
    -b     --  Generate the list of cat/ports based on port tree
               instead of diff, git and svn only, slow
    -C     --  Check only, will not touch port tree, only vaild with -p
               git may display errors if files do not exist,
               these files are created without this option
    -d     --  Sets PORTSDIR, -U overrides this option
    -j     --  Jails used for poudriere, if multiple are used
               must be in "" with a space as a seperator,
               only used with -T option
    -m     --  Repo method, only used with -c valid methods are
               git,git+https,git+ssh,svn,svn+http,svn+https,
               svn+ssh,portsnap default method is git
    -U     --  Sets USE_POUDRIERE="YES" and sets port tree to use

By default, (no options) portest does nothing
EOF
	exit 1
}

ALL="0"
POUDRIERE_BULK="0"
DO_PATCH="0"
REVERT_REPO="0"
RESET_REPO="0"
TEST_PORTLINT="0"
TEST_BUILD="0"
REPO_BUILD_LIST="0"
CREATE_REPO="0"
UPDATE_REPO="0"
CHECK_ONLY=0

while getopts ":abcCd:j:f:m:prRtTuU:v" FLAG; do
	case "${FLAG}" in
	a)
		ALL="1" ;;
	b)
		REPO_BUILD_LIST="1" ;;
	c)
		CREATE_REPO="1" ;;
	C)
		CHECK_ONLY="1" ;;
	d)
		PORTSDIR="${OPTARG}" ;;
	j)
		POUDRIERE_JAILS="${OPTARG}" ;;
	f)
		POUDRIERE_BULK="1"
		POUDRIERE_BULK_FILE="${OPTARG}" ;;
	m)	
		METHOD="${OPTARG}" ;;
	p)
		DO_PATCH="1" ;;
	r)
		REVERT_REPO="1" ;;
	R)	
		REVERT_REPO="1"
		RESET_REPO="1" ;;
	t)
		TEST_PORTLINT="1" ;;
	T)
		TEST_BUILD="1" ;;
	u)
		UPDATE_REPO="1" ;;
	U)
		USE_POUDRIERE="YES"
		POUDRIERE_PORT="${OPTARG}" ;;
	v)
		echo "${PORTEST_VERSION}"
		exit 0 ;;
	*)
		usage
		exit 1 ;;
	esac
done

[ $# -lt 1 ] && usage

shift "$((OPTIND-1))"

if [ ${REPO_BUILD_LIST} -ne 1 ]; then
[ $(( ALL + POUDRIERE_BULK + DO_PATCH + TEST_PORTLINT + TEST_BUILD )) -ge 1 ] && [ $# -lt 1 ] && usage
elif [ $(( DO_PATCH )) -ge 1 ] && [ $# -lt 1 ]; then
	usage;
fi

: ${METHOD:="git"}
if [ "${CREATE_REPO}" -eq "1" ] && [ "${USE_POUDRIERE}" != "YES" ]; then
	: ${GIT_URL:="github.com/freebsd/freebsd-ports"}
	: ${SVN_URL:="svn.FreeBSD.org/ports"}
	case ${METHOD} in
	git) PROTO="git" ;;
	git+https) PROTO="https" ;;
	git+ssh) PROTO="git" ;;
	svn) PROTO="svn" ;;
	svn+http) PROTO="http" ;;
	svn+https) PROTO="https" ;;
	svn+ssh) PROTO="svn+ssh" ;;
	portsnap) ;;
	*) usage;;
	esac

	case ${METHOD} in
	git*) : ${BRANCH:="master"} ;;
	svn*) : ${BRANCH:="head"} ;;
	esac

	case ${METHOD} in
	git+ssh) GIT_REPO_URL="`echo ${PROTO}@${GIT_URL} | sed 's/\//\:&/'`" ;;
	git*) GIT_REPO_URL="${PROTO}://${GIT_URL}" ;;
	svn*) SVN_REPO_URL="${PROTO}://${SVN_URL}/${BRANCH}" ;;
	esac
fi

: ${PATCH:="patch"}
: ${PATCH_ARGS:="-Ef"}
: ${PORTSNAP:="portsnap"}
: ${PORTSNAP_FETCH_ARGS:="fetch"}
: ${PORTSNAP_EXTRACT_ARGS:="extract"}
: ${PORTSNAP_UPDATE_ARGS:="update"}
: ${SVN:="svn"}
: ${SVN_CHECKOUT_ARGS:="checkout ${SVN_REPO_URL}"}
: ${SVN_PATCH_ARGS:="patch"}
: ${SVN_REVERT_ARGS:="revert -R"}
: ${SVN_UPDATE_ARGS:="update"}
: ${GIT:="git"}
: ${GIT_ADD_ARGS:="add -AN"}
: ${GIT_CLEAN_ARGS:="clean -fd -f -x -e /distfiles -e /local -e /packages -e /INDEX-[0-9]* -e *~ -e *.sw[p-z]"}
: ${GIT_CLONE_ARGS:="clone --depth 1 -b ${BRANCH} ${GIT_REPO_URL}"}
: ${GIT_APPLY_ARGS:="apply --whitespace=nowarn"}
: ${GIT_RESET_ARGS:="reset --hard"}
: ${GIT_UPDATE_ARGS:="pull"}
: ${MAKE:="make"}
: ${MAKE_ARGS:="depends BATCH=yes"}
: ${OPENSSL:="openssl"}
: ${OPENSSL_ARGS:="rand -hex 16"}
: ${TMUX_COMMAND:="tmux"}
: ${TMUX_LAYOUT:="tiled"}
: ${PORTLINT:="portlint"}
: ${PORTLINT_ARGS:="-AC"}
: ${PORT:="port"}
: ${PORT_ARGS:="test"}
: ${PORTSDIR:="/usr/ports"}
: ${BULK_FILE:="build.ports.txt"}


: ${USE_POUDRIERE:="NO"}
: ${POUDRIERE_JAILS:=""}
: ${POUDRIERE_PORTSDIR:="/usr/local/poudriere/ports"}
: ${POUDRIERE_PORT:="default"}
: ${POUDRIERE:="/usr/local/bin/poudriere"}
: ${POUDRIERE_BULK_ARGS:="bulk -t -C -p ${POUDRIERE_PORT}"}
: ${POUDRIERE_PORTS_ARGS:="ports -c -m ${METHOD} -p ${POUDRIERE_PORT}"}

# Set poudriere ports dir if being used #
if [ "${USE_POUDRIERE}" == "YES" ]; then
PORTSDIR="${POUDRIERE_PORTSDIR}/${POUDRIERE_PORT}"
fi
CURDIR="`pwd`"
# Check commands #
check_command() {
if ! [ -x "`command -v $1`" ]; then
	echo "$1 not found. $2" && exit 1
fi
}
check_svn() {
if ! [ -x "`command -v ${SVN}`" ]; then
	SVN="svnlite"
	if ! [ -x "`command -v ${SVN}`" ]; then
		echo "svn or svnlite not found. Try installing it, pkg install subversion" && exit 1
	fi
fi
}
check_empty_dir() {
	mkdir -p "$1"
	[ ! "`find "$1" -type d -empty -maxdepth 1`" ] && echo "$1 is not empty" && exit 1
}
### Create Repo ###
if [ "${CREATE_REPO}" -eq "1" ]; then
	if [ "${USE_POUDRIERE}" == "YES" ]; then
		check_command "${POUDRIERE}" "Try installing it, pkg install poudriere"
		${POUDRIERE} ${POUDRIERE_PORTS_ARGS}
	else
	check_empty_dir "${PORTSDIR}"
		case ${METHOD} in
			git*)
			check_command "${GIT}" "Try installing it, pkg install git"
			${GIT} ${GIT_CLONE_ARGS} "${PORTSDIR}"
			if [ "$?" -ne "0" ]; then
			echo "git clone failed" && exit 1
			fi
			;;
			svn*)
			check_svn
			${SVN} ${SVN_CHECKOUT_ARGS} "${PORTSDIR}"
			if [ "$?" -ne "0" ]; then
			echo "svn checkout failed" && exit 1
			fi
			;;
			portsnap*)
			check_command "${PORTSNAP}"
			cd ${PORTSDIR} && PORTSDIR="`pwd`"
			if [ "${PORTSDIR}" != "/usr/ports" ]; then
				mkdir : ${PORTSNAP_WRKDIR:="${PORTSDIR}/.snap"}
				${PORTSNAP} -d "${PORTSNAP_WRKDIR}" -p "${PORTSDIR}" ${PORTSNAP_FETCH_ARGS} ${PORTSNAP_EXTRACT_ARGS}
			else
				${PORTSNAP} ${PORTSNAP_FETCH_ARGS} ${PORTSNAP_EXTRACT_ARGS}
			fi
			if [ "$?" -ne "0" ]; then
			echo "portsnap creation failed" && exit 1
			fi
			;;
		esac
	fi
fi
# Verify PORTSDIR #
! [ -d "${PORTSDIR}" ] && echo "PORTSDIR not set or incorrect directory" && exit 1
cd ${PORTSDIR} && PORTSDIR="`pwd`"
: ${BACKUPDIR:="${PORTSDIR}/.bak"}
[ "`head -1 "${PORTSDIR}/README" | grep -com1 \"FreeBSD Ports Collection\"`" -ne "1" ] && echo "PORTSDIR is set to an incorrect directory" && exit 1
# Check PORTSDIR for svn or git tree #
if [ -d "${PORTSDIR}/.svn" ]; then
	check_svn && REPO_TYPE="svn" REPO="${SVN}" REPO_STATUS="status"
	[ $(( ${REVERT_REPO} + ${RESET_REPO} )) -eq 1 ] && [ $# -lt 1 ] && usage
fi
[ -d "${PORTSDIR}/.git" ] && check_command "${GIT}" "Try installing it, pkg install git" && REPO_TYPE="git" REPO="${GIT}" REPO_STATUS="status -s"
# If not, use portsnap #
if [ -z "${REPO_TYPE}" ]; then
	check_command "${PORTSNAP}"
	if [ "${PORTSDIR}" != "/usr/ports" ]; then
		: ${PORTSNAP_WRKDIR:="${PORTSDIR}/.snap"}
		: ${PORTSNAP_ARGS:="-d ${PORTSNAP_WRKDIR} -p ${PORTSDIR}"}
	! [ -d "${PORTSNAP_WRKDIR}" ] && echo "Unsupported repo or portsnap wrkdir not found. Set PORTSNAP_WRKDIR if the latter" && exit 1
	else
		: ${PORTSNAP_WRKDIR:=""}
		: ${PORTSNAP_ARGS:=""}
	fi
	REPO_TYPE="portsnap"
fi
if [ "${CHECK_ONLY}" -eq "1" ]; then
	case ${REPO_TYPE} in
		svn*) SVN_CHECK_ARGS="--dry-run" ;;
		git*) GIT_CHECK_ARGS="--check" ;;
		portsnap*) PATCH_CHECK_ARGS="-C" ;;
	esac
fi
if [ "${REPO_BUILD_LIST}" -eq "1" ]; then
	case ${REPO_TYPE} in
	svn*);;
	git*);;
	*) echo "Port tree is not a svn or git repo, This is required with the -b option" && exit 1 ;;
	esac
fi
# Sets absolute path for patchfile or checks for proper cat/port #
cd "${PORTSDIR}"
for arg in "${@}"; do
	if [ -f "$arg" ]; then
		PATCH_FILE="${PATCH_FILE}
$arg"
	elif [ -f "${CURDIR}/$arg" ]; then
		PATCH_FILE="${PATCH_FILE}
${CURDIR}/$arg"
	elif [ -d "${PORTSDIR}/$arg" ]; then
		CAT_PORT="${CAT_PORT}
$arg/"
	else
		echo "$arg not found" && exit 1
	fi
done

for file in ${PATCH_FILE}; do
	if [ "`cat "$file" | grep -com1 '^+++[ ].*'`" -eq "1" ]; then
		UNI_PATCH_FILE="${UNI_PATCH_FILE}
$file"
	else
		echo "$file is not a recognized patch format" && exit 1
	fi
done

# Check for valid jails #
if [ "${USE_POUDRIERE}" == "YES" ] && [ "${TEST_BUILD}" -eq "1" ]; then
	check_command "${POUDRIERE}" "Try installing it, pkg install poudriere"
	[ -z "${POUDRIERE_JAILS}" ] && echo "no jails selected use -j or export POUDRIERE_JAILS=\"jail1 jail2\"" && exit 1
	POUDRIERE_JAILS=`printf "%s\n" ${POUDRIERE_JAILS} | sort -u`
	for jail in ${POUDRIERE_JAILS}; do
	${POUDRIERE} jail -i -j $jail >/dev/null 2>&1
	[ $? -ne 0 ] && echo "No such jail $jail" && exit 1
	done
fi

add_patchfile() {
	case ${REPO_TYPE} in
	svn*)	PATCH_FILES_LIST="${PATCH_FILES_LIST}
"`echo "$3" | grep '^[^\>][ ][ ][ ].*' |  awk '{ print $(NF) }'` ;;
	git*)	PATCH_FILES_LIST="${PATCH_FILES_LIST} 
"`echo "$3" | grep '\.\.\.$' | awk '{ print $(NF) }'| sed 's/\.\.\.$//'` ;;
	portsnap*)	PATCH_FILES_LIST="${PATCH_FILES_LIST}
"`${PATCH} ${PATCH_ARGS} -C -p${STRIP_COUNT} -d "${PORTSDIR}" -i "$1" | grep -A 2 '\-\-\-\-' | grep '\.\.\.$' | awk '{ print $3 }' | grep -v '^to$'` ;;
	esac
	PATCH_STRIP_COUNT="${PATCH_STRIP_COUNT}
$2"
}

patchfile_check() {
local HIGHEST_SUCCESS="0"
local HIGHEST_FAILED="0"
local STRIP_COUNT="$3"
local FILE="`cat "$1" | grep -v '/dev/null' | grep -Em1 '^(\+\+\+|---)[ ].*' | awk '{ print $2 }'`"
cd ${PORTSDIR}
while [ "$2" -ge "${STRIP_COUNT}" ]; do
	local check_file="`echo "${FILE}" | sed -E "s/^(\/)?([^\/]*\/){${STRIP_COUNT}}// ; s/\/.*//"`"
	if [ -d "${PORTSDIR}/${check_file}" ]; then
		case ${REPO_TYPE} in
		svn*)	local OUTPUT="`${SVN} ${SVN_PATCH_ARGS} --dry-run --strip ${STRIP_COUNT} "$1" ${PORTSDIR}`"
			local SUCCESS="`echo "${OUTPUT}" | grep -co '^.[ ][ ][ ]*'`"
			local FAILED="`echo "${OUTPUT}" | grep -co '^Skipped'`"
			[ "${STRIP_COUNT}" -eq "0" ] && [ "${FAILED}" -eq "0" ] && add_patchfile "$1" "${STRIP_COUNT}" "${OUTPUT}" && return ;;
		git*)	local OUTPUT="`${GIT} ${GIT_APPLY_ARGS} -p${STRIP_COUNT} --check -v "$1" 2>&1`"
			[ "$?" -eq "0" ] && add_patchfile "$1" "${STRIP_COUNT}" "${OUTPUT}" && return
			[ "`echo "${OUTPUT}" | grep -com1 'patch does not apply'`" -ge "1" ] && add_patchfile "$1" "${STRIP_COUNT}" "${OUTPUT}" && return
			local SUCCESS="`echo "${OUTPUT}" | grep -co '\.\.\.$'`"
			local FAILED="`echo "${OUTPUT}" | grep -co ':'`"
			local SUCCESS="$(( ${SUCCESS} - ${FAILED} ))" ;;
		portsnap*)	local OUTPUT="`${PATCH} ${PATCH_ARGS} -sC -p${STRIP_COUNT} -d "${PORTSDIR}" -i "$1"`"
				[ "$?" -eq "0" ] && add_patchfile "$1" "${STRIP_COUNT}" "${OUTPUT}" && return
				local SUCCESS="100000"
				local FAILED="`echo "${OUTPUT}" | grep -co '\.\.\.'`" ;;
		esac
		[ "$(( ${HIGHEST_SUCCESS} - ${HIGHEST_FAILED} ))" -lt "$(( ${SUCCESS} - ${FAILED} ))" ] && local HIGHEST_SUCCESS="${SUCCESS}" local HIGHEST_FAILED="${FAILED}" local HIGHEST_STRIP_COUNT="${STRIP_COUNT}" local HIGHEST_OUTPUT="${OUTPUT}"
		if [ "$2" -ge "${STRIP_COUNT}" ]; then
			if [ "${HIGHEST_SUCCESS}" -gt "${HIGHEST_FAILED}" ]; then
				add_patchfile "$1" "${HIGHEST_STRIP_COUNT}" "${HIGHEST_OUTPUT}" && return
			else
				echo Patchfile "$1" Failed, try a revert? && exit 1
			fi
		fi
	fi
		local STRIP_COUNT=$(( ${STRIP_COUNT} + 1 ))
done
}

patchfile_patch() {
local DOLLARSIGN="$"
local POS="1"
for file in $1; do
	local pos=`echo $2 | awk "{ print ${DOLLARSIGN}${POS} }"`
	case ${REPO_TYPE} in
		svn*)	PATCH_OUTPUT="${PATCH_OUTPUT}
"`${SVN} ${SVN_PATCH_ARGS} ${SVN_CHECK_ARGS} --strip $pos "$file" "${PORTSDIR}" 2>&1 | grep '^. '` ;;
		git*)	PATCH_OUTPUT="${PATCH_OUTPUT}
"`${GIT} ${GIT_APPLY_ARGS} ${GIT_CHECK_ARGS} -p$pos "$file" 2>&1` ;;
		portsnap*)	PATCH_OUTPUT="${PATCH_OUTPUT}
"`${PATCH} ${PATCH_ARGS} ${PATCH_CHECK_ARGS} -s -p$pos -d "${PORTSDIR}" -i "$file" 2>&1` ;;
	esac
	local POS="$(( ${POS} + 1 ))"
done
}

filelist() {
[ "${REPO_TYPE}" == "portsnap" ] && check_command "${PATCH}"
for patchfile in ${UNI_PATCH_FILE}; do
	local MAX_STRIP_COUNT="`cat "$patchfile" | grep -v '/dev/null' |grep -Em1 '^(\+\+\+|---)[ ].*' | awk -F/ '{ print NF-1 }'`"
	case ${REPO_TYPE} in
		portsnap*)	local STRIP_COUNT="`cat "$patchfile" | grep -v '/dev/null' | grep -Em1 '^(\+\+\+|---)[ ].*' | awk '{ print $2 }' | grep -co '^/'`" ;;
		*)		local STRIP_COUNT="0" ;;
	esac
	patchfile_check "$patchfile" "${MAX_STRIP_COUNT}" "${STRIP_COUNT}"
done
PATCH_FILES_LIST="`echo "${PATCH_FILES_LIST}
${CAT_PORT}" | sort -u`"
}

folderlist() {
[ -z "${PATCH_FILES_LIST}" ] && filelist
[ -n "${PATCH_FILES_LIST}" ] && PATCH_FOLDER_LIST="`echo "${PATCH_FILES_LIST}" | grep -Eo '^([^/]+\/+[^/]+\/+[^/]+\/|[^/]+\/+[^/]+\/)' | sed 's/\/$//' | sort -u`"
}

# Generate a list of ports for poudriere to build #
buildlist() {
if [ "${REPO_BUILD_LIST}" -eq "1" ]; then
cd ${PORTSDIR}
BUILD_LIST="`${REPO} ${REPO_STATUS} | awk '{ print $(NF) }' | grep -Eo '^[^A-Z][^/]+\/+[^/]+\/' | sed 's/\/$//' | grep "/" | sort -u`"
[ -z "${CAT_PORT}" ] && BUILD_LIST="`echo "${BUILD_LIST}
${CAT_PORT}" | grep '.*' | sort -u`"
else
[ -z "${PATCH_FILES_LIST}" ] && filelist
BUILD_LIST="`echo "${PATCH_FILES_LIST}" | grep -Eo '^[^A-Z][^/]+\/+[^/]+\/' | sed 's/\/$//' | grep "/" | sort -u`"
fi
}

git_revert() {
if [ "${REVERT_REPO}" -eq "1" ]; then
${GIT} ${GIT_RESET_ARGS}
${GIT} ${GIT_CLEAN_ARGS}
REVERT_REPO="0"
fi
}

portsnap_revert() {
if [ "${REVERT_REPO}" -eq "1" ] && [ "${RESET_REPO}" -ne "1" ]; then
	! [ -d "${BACKUPDIR}" ] && echo "Nothing to revert, try the -R option?" && exit 1
	cd ${BACKUPDIR}
	for dir in `find ./ -type d -maxdepth 1 | sed 's/^\.\///' | grep '^[A-Z]'`; do
		rm -rf "${PORTSDIR}/$dir"
		mv "${BACKUPDIR}/$dir" "${PORTSDIR}/$dir"
	done
	local EMPTY_FOLDERS="`find ./ -type d -mindepth 2 -maxdepth 3 -empty | sed 's/^\.\///'`"
	for dir in `find ./ -type d -mindepth 2 -maxdepth 2 | sed 's/^\.\///'`; do
		rm -rf "${PORTSDIR}/$dir"
		[ -n "${EMPTY_FOLDERS}" ] && rmdir -p `echo "${EMPTY_FOLDERS}"` >/dev/null 2>&1
		[ -n "${EMPTY_FOLDERS}" ] && unset EMPTY_FOLDERS
		[ -d "${BACKUPDIR}/$dir" ] && mv "${BACKUPDIR}/$dir" "${PORTSDIR}/$dir"
	done
	for file in `find ./ -type f -maxdepth 2 | sed 's/^\.\///'`; do
		rm -f "${PORTSDIR}/$file"
		mv "${BACKUPDIR}/$file" "${PORTSDIR}/$file"
	done
	cd ${PORTSDIR}
	rm -r "${BACKUPDIR}"
	rm `find ./ -maxdepth 2 -name "*.[ro][er][ji]*" | grep -v distfiles` >/dev/null 2>&1
	REVERT_REPO="0"
elif [ "${REVERT_REPO}" -eq "1" ] && [ "${RESET_REPO}"  -eq "1" ]; then
	${PORTSNAP} ${PORTSNAP_ARGS} ${PORTSNAP_EXTRACT_ARGS}
	cd ${PORTSDIR}
	rm -rf "${BACKUPDIR}"
	rm `find ./ -maxdepth 1 -name "*.[ro][er][ji]*"` >/dev/null 2>&1
	REVERT_REPO="0"
fi
}

svn_revert() {
if [ "${REVERT_REPO}" -eq "1" ] && [ "${RESET_REPO}" -eq "1" ]; then
	cd ${PORTSDIR}
	for file in `${SVN} status | awk '{ print $(NF) }'`; do
		rm -rf "${PORTSDIR}/$file"
	done
	${SVN} ${SVN_REVERT_ARGS} ${PORTSDIR}
	rm `find ./ -maxdepth 1 -name "*.[ro][er][ji]*"` >/dev/null 2>&1
	REVERT_REPO="0"
elif [ "${REVERT_REPO}" -eq "1" ] && [ "${RESET_REPO}" -ne "1" ]; then
	[ -z "${BUILD_LIST}" ] && buildlist
# Wierd cases where svn won't see short filenames in list.    #
# This seems to be an svn bug, this list helps in those cases #
	PATCH_FILES_FILTERED="`echo "${PATCH_FILES_LIST}" | grep -v '^[^/]*\/[^/]*\/[^/]*'`"
	for file in ${BUILD_LIST}; do
		rm -rf "${PORTSDIR}/$file"
	done
	for file in ${PATCH_FILES_LIST}; do
		rm -rf "${PORTSDIR}/$file"
	done
	[ -n "${BUILD_LIST}" ] && ${SVN} ${SVN_REVERT_ARGS} ${BUILD_LIST}
	[ -n "${PATCH_FILES_LIST}" ] && ${SVN} ${SVN_REVERT_ARGS} ${PATCH_FILES_LIST}
	[ -n "${PATCH_FILES_FILTERED}" ] && ${SVN} ${SVN_REVERT_ARGS} ${PATCH_FILES_FILTERED}
	rm `find ./ -maxdepth 1 -name "*.[ro][er][ji]*"` >/dev/null 2>&1
	REVERT_REPO="0"
fi
}

### Update Repo ###
if [ "${UPDATE_REPO}" -eq "1" ]; then
cd ${PORTSDIR}
	case ${REPO_TYPE} in
		svn)		svn_revert
				${SVN} ${SVN_UPDATE_ARGS} ;;
                git)		git_revert
				${GIT} ${GIT_UPDATE_ARGS} ;;
		portsnap)	portsnap_revert
				${PORTSNAP} ${PORTSNAP_ARGS} ${PORTSNAP_FETCH_ARGS} ${PORTSNAP_UPDATE_ARGS} ;;
	esac
fi

### Patch Tree ###
if [ "${DO_PATCH}" -eq "1" ] || [ "${ALL}" -eq "1" ]; then
	[ -z "${PATCH_FOLDER_LIST}" ] && folderlist
	if [ "${CHECK_ONLY}" -ne "1" ]; then
		case ${REPO_TYPE} in
		portsnap*)	mkdir -p ${BACKUPDIR} && cd ${BACKUPDIR}
				mkdir -p `echo "${PATCH_FILES_LIST}" | sed 's/^[A-Z].*//' | grep -o '^[^/]*\/[^/]*\/' | sed 's/\/$// ; s/[^/]*$//' | sort -u`
				cd ${PORTSDIR}
				for dir in `find ./ -type d -maxdepth 1 | sed 's/^\.\///' | grep '^[A-Z]'`; do
					! [ -d "${BACKUPDIR}/$dir" ] && cp -Ra "${PORTSDIR}/$dir" "${BACKUPDIR}/$dir"
				done
				for file in `find ./ -type f -maxdepth 2 | sed 's/^\.\/// ; s/distfiles.*//'`; do
					! [ -f "${BACKUPDIR}/$file" ] && cp -a "${PORTSDIR}/$file" "${BACKUPDIR}/$file" >/dev/null 2>&1
				done
				for dir in `echo "${PATCH_FOLDER_LIST}"`; do
					! [ -d "${PORTSDIR}/$dir" ] && mkdir -p "${PORTSDIR}/$dir"
				done
				for dir in `echo "${PATCH_FILES_LIST}" | grep -o '^[^/]*\/[^/]*\/' | sed 's/\/$//' | sort -u`; do
					! [ -d "${BACKUPDIR}/$dir" ] && cp -Ra "${PORTSDIR}/$dir" "${BACKUPDIR}/$dir"
				done ;;
		git*)		for dir in `echo "${PATCH_FOLDER_LIST}"`; do
					! [ -d "${PORTSDIR}/$dir" ] && mkdir -p "${PORTSDIR}/$dir"
				done
				for file in `echo "${PATCH_FILES_LIST}"`; do
					! [ -f "${PORTSDIR}/$file" ] && touch "${PORTSDIR}/$file"
				done ;;
		esac
	fi
	cd ${PORTSDIR}
	[ -n "${UNI_PATCH_FILE}" ] && patchfile_patch "${UNI_PATCH_FILE}" "${PATCH_STRIP_COUNT}"
	case ${REPO_TYPE} in
	svn*)	if [ "`echo "${PATCH_OUTPUT}" | grep -com1 reject`" -gt "0" ]; then
			echo "${PATCH_OUTPUT}" | grep '^[^ ].*'
			echo "Patch Failed" && exit 1
		fi
		echo "${PATCH_OUTPUT}" | grep '^[^ ].*';;
	git*)	if [ "`echo "${PATCH_OUTPUT}" | grep -com1 error`" -gt "0" ]; then
			echo "${PATCH_OUTPUT}" | grep '^[^ ].*'
			echo "Patch Failed" && exit 1
		fi
		echo "${PATCH_OUTPUT}" | grep '^[^ ].*'
		${GIT} ${GIT_ADD_ARGS} ${PATCH_FOLDER_LIST}
		rm `find ${PATCH_FOLDER_LIST} -maxdepth 1 -empty` 2>/dev/null ;;
	*)	if [ "`echo "${PATCH_OUTPUT}" | grep -com1 rejects`" -gt "0" ]; then
			echo "${PATCH_OUTPUT}" | grep '^[^ ].*'
			echo "Patch Failed" && exit 1
		fi
		echo "${PATCH_OUTPUT}" | grep '^[^ ].*'
		cd ${PORTSDIR}
		rm `find ${PATCH_FOLDER_LIST} -maxdepth 1 -name "*.orig"` 2>/dev/null ;;
	esac
fi

### Bulk File ###
if [ "$POUDRIERE_BULK" -eq "1" ]; then
	[ -z "${BUILD_LIST}" ] && buildlist
	cd "${CURDIR}"
	echo "${BUILD_LIST}" >"${POUDRIERE_BULK_FILE}"
elif [ "${ALL}" -eq "1" ]; then
	[ -z "${BUILD_LIST}" ] && buildlist
	cd "${CURDIR}"
	echo "${BUILD_LIST}" >"${BULK_FILE}"
fi

### Portlint ###
if [ "${TEST_PORTLINT}" -eq "1" ] || [ "${ALL}" -eq "1" ]; then
	check_command "${PORTLINT}" "Try installing it, pkg install portlint"
	[ -z "${BUILD_LIST}" ] && buildlist
	for port in ${BUILD_LIST}; do
		cd "${PORTSDIR}/$port"
		echo "$port"
		${PORTLINT} ${PORTLINT_ARGS}
	done
fi


### Port test and Poudriere testing ###
if [ "${TEST_BUILD}" -eq "1" ] && [ "${USE_POUDRIERE}" != "YES" ]; then
	check_command "${PORT}" "Try installing it, pkg install porttools"
	check_command "${MAKE}"
	rm -rf "`find ${PORTSDIR} -type d -name "work" -maxdepth 3`"
	[ -z "${BUILD_LIST}" ] && buildlist
	for port in ${BUILD_LIST}; do
		cd "${PORTSDIR}/$port"
		${MAKE} ${MAKE_ARGS}
		${PORT} ${PORT_ARGS}
	done
elif [ "${TEST_BUILD}" -eq "1" ] && [ "${USE_POUDRIERE}" == "YES" ]; then
	check_command "${TMUX_COMMAND}" "Try installing it, pkg install tmux"
	[ -z ${TMUX_SESSION} ] && check_command "${OPENSSL}" "Try installing it, pkg install openssl"
	[ -z "${BUILD_LIST}" ] && buildlist
	: ${TMUX_SESSION:="portest-`${OPENSSL} ${OPENSSL_ARGS}`"}
	printf "Verifying jails not already running"
	for jail in ${POUDRIERE_JAILS}; do
		if [ "`${POUDRIERE} status -cH -j $jail | awk '{ print $2 }' | grep -com1 "^${POUDRIERE_PORT}$"`" -eq "1" ]; then
			echo " $jail is already running on ${POUDRIERE_PORT}" && exit 1
		fi
		printf "."
	done
	printf " Done"
	printf "\nStarting jails"
	for jail in ${POUDRIERE_JAILS}; do
		if [ "`${TMUX_COMMAND} list-sessions | grep -com1 "${TMUX_SESSION}"`" -ne "1" ]; then
			${TMUX_COMMAND} new-session -ds "${TMUX_SESSION}" ${POUDRIERE} ${POUDRIERE_BULK_ARGS} -j $jail ${BUILD_LIST}
		else
			${TMUX_COMMAND} split-window -dt "${TMUX_SESSION}" ${POUDRIERE} ${POUDRIERE_BULK_ARGS} -j $jail ${BUILD_LIST}
		fi
		sleep 1
		printf "."
	done
	printf " Done"
	printf "\nVerifying jails started successfully... Please wait"
	: ${JAIL_MAX_VERIFY:="3"}
	JAIL_VERIFY="0"
	JAILS_STARTED="0"
	while [ ${JAILS_STARTED} -ne "1" ] && [ "${JAIL_MAX_VERIFY}" -ge "${JAIL_VERIFY}" ]; do
		sleep 10
		JAILS_STARTED="1"
		for jail in ${POUDRIERE_JAILS}; do
			OUTPUT="`${POUDRIERE} status -cH -j $jail | awk '{ print $2 }' | grep -com1 "^${POUDRIERE_PORT}$"`"
			if [ "${OUTPUT}" -ne "1" ]; then
				if [ "`${TMUX_COMMAND} list-sessions | grep -com1 "${TMUX_SESSION}"`" -eq "1" ]; then
					${TMUX_COMMAND} split-window -dt "${TMUX_SESSION}" ${POUDRIERE} ${POUDRIERE_BULK_ARGS} -j $jail ${BUILD_LIST}
				else
					${TMUX_COMMAND} new-session -ds "${TMUX_SESSION}" ${POUDRIERE} ${POUDRIERE_BULK_ARGS} -j $jail ${BUILD_LIST}
				fi
			fi
			if [ "${JAILS_STARTED}" -ne "0" ] && [ "${OUTPUT}" -eq "1" ] ; then
				JAILS_STARTED="1"
			else
				JAILS_STARTED="0"
			fi
			printf "."
		done
		JAIL_VERIFY=$(( ${JAIL_VERIFY} + 1 ))
	done
	printf " done"
	${TMUX_COMMAND} select-layout -t "${TMUX_SESSION}" ${TMUX_LAYOUT}
	${TMUX_COMMAND} attach-session -t "${TMUX_SESSION}" >/dev/null 2>&1
	if [ "$?" -ne 0 ]; then
		${TMUX_COMMAND} switch -t "${TMUX_SESSION}"
	fi
	if [ "${REVERT_REPO}" -eq "1" ] || [ "${RESET_REPO}" -eq "1" ]; then
		while [ "`${TMUX_COMMAND} list-sessions -F \#S | grep -com1 "${TMUX_SESSION}"`" -eq "1" ]; do
			sleep 10
		done
	fi
fi

### Revert Patch ###
cd ${PORTSDIR}
case ${REPO_TYPE} in
	svn*)		svn_revert ;;
	git*)		git_revert ;;
	portsnap*)	portsnap_revert ;;
esac
